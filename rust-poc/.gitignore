# Generated by Cargo
# will have compiled files and executables
debug/
target/

# qfplib build artifacts
qfplib-sys/target/
*.o
*.a
*.so
*.lib

# Binary artifacts (organized in bin/ directory)
bin/*.bin
bin/*.elf  
bin/*.uf2
bin/*.hex

# Archive directories for old build artifacts
bin/archive/
bin/old_builds/
build_scripts_archive/
old_files_archive/
src_archive/

# Performance test data (created by hardware testing)
performance_data/

# Backup files from cleanup operations
*.backup
*.old
*.orig
*.bak
*.save
README.md.backup
build.rs.old

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# IDE files
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Environment variables
.env
.env.local
.env.*.local

# Log files
*.log

# Temporary build files
*.tmp
*.temp
build_output.txt
compile_commands.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# Flamegraph output
flamegraph.svg
perf.data*